definitions:
  rest.AuthCheckTokenResp:
    properties:
      username:
        type: string
    type: object
  rest.AuthLoginResp:
    properties:
      access_token:
        type: string
    type: object
  rest.BaseJSONResp:
    properties:
      data: {}
      detail:
        type: string
      error:
        type: boolean
      message:
        type: string
    type: object
  rest.GetProductListResp:
    properties:
      category:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  rest.PostAddItemToCartReq:
    properties:
      quantity:
        default: 1
        type: integer
    type: object
  rest.PostCheckTokenReq:
    properties:
      token:
        type: string
    type: object
  rest.PostLoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  rest.PostRegisterReq:
    properties:
      confirm_password:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  title: Backend Challange Synapsis API
paths:
  /auth/check-token:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/rest.PostCheckTokenReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/rest.AuthCheckTokenResp'
              type: object
      summary: check jwt token
      tags:
      - Auth
  /auth/login:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/rest.PostLoginReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/rest.AuthLoginResp'
              type: object
      summary: generate jwt token (MANDATORY)
      tags:
      - Auth
  /auth/register:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/rest.PostRegisterReq'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.BaseJSONResp'
            - properties:
                data:
                  $ref: '#/definitions/rest.AuthLoginResp'
              type: object
      summary: Register New User (MANDATORY)
      tags:
      - Auth
  /cart/orders:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.BaseJSONResp'
      security:
      - BearerAuth: []
      summary: get product list from current cart (MANDATORY)
      tags:
      - Cart
  /cart/orders/{id}:
    delete:
      parameters:
      - description: order id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.BaseJSONResp'
      security:
      - BearerAuth: []
      summary: remove item from cart (MANDATORY)
      tags:
      - Cart
  /products:
    get:
      parameters:
      - in: query
        name: category
        type: string
      - default: 10
        in: query
        name: limit
        type: integer
      - default: 1
        in: query
        name: page
        type: integer
      - description: using regex
        in: query
        name: search
        type: string
      - default: created_at
        in: query
        name: sort_by
        type: string
      - default: desc
        in: query
        name: sort_order
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.BaseJSONResp'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/rest.GetProductListResp'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: get product list (MANDATORY)
      tags:
      - Product
  /products/{id}/add-to-cart:
    post:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/rest.PostAddItemToCartReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.BaseJSONResp'
      security:
      - BearerAuth: []
      summary: add item to cart (MANDATORY)
      tags:
      - Product
  /products/category-list:
    get:
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.BaseJSONResp'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: get product category list
      tags:
      - Product
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
